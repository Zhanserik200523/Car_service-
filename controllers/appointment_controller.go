package controllers

import (
	"car-service/database"
	"car-service/models"
	"car-service/utils"

	"github.com/gin-gonic/gin"
	"net/http"
)

func CreateAppointment(c *gin.Context) {
	userID, _ := c.Get("user_id")

	var input struct {
		CarID     uint   `json:"car_id"`
		ServiceID uint   `json:"service_id"`
		Date      string `json:"date"`
		Time      string `json:"time"` // üëà –î–æ–±–∞–≤–∏–ª–∏ –≤—Ä–µ–º—è
		Comment   string `json:"comment"`
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è
	var existing models.Appointment
	if err := database.DB.Where("date = ? AND time = ?", input.Date, input.Time).First(&existing).Error; err == nil {
		c.JSON(http.StatusConflict, gin.H{"error": "–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."})
		return
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
	app := models.Appointment{
		UserID:    userID.(uint),
		CarID:     input.CarID,
		ServiceID: input.ServiceID,
		Date:      input.Date,
		Time:      input.Time,
		Comment:   input.Comment,
	}

	if err := database.DB.Create(&app).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"})
		return
	}
	go func() {
		car := models.Car{}
		service := models.Service{}
		user := models.User{}

		database.DB.First(&car, app.CarID)
		database.DB.First(&service, app.ServiceID)
		database.DB.First(&user, userID)

		body := "<h3>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</h3>" +
			"<p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> " + user.Email + "</p>" +
			"<p><strong>–ò–º—è:</strong> " + user.FirstName + " " + user.LastName + "</p>" +
			"<p><strong>–ú–∞—à–∏–Ω–∞:</strong> " + car.Brand + " " + car.CarModel + "</p>" +
			"<p><strong>–£—Å–ª—É–≥–∞:</strong> " + service.Name + "</p>" +
			"<p><strong>–î–∞—Ç–∞:</strong> " + app.Date + " " + app.Time + "</p>"

		err := utils.SendAppointmentEmail("zhanserik200523@gmail.com", "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –°–¢–û", body)
		if err != nil {
			println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã:", err.Error())
		} else {
			println("‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		}
	}()

	c.JSON(http.StatusCreated, gin.H{"message": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É!"})
}

func GetUserAppointments(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
		return
	}

	var appointments []models.Appointment
	if err := database.DB.
		Preload("Car").
		Preload("Service"). // üëà –î–æ–±–∞–≤—å —ç—Ç–æ
		Where("user_id = ?", userID).
		Find(&appointments).Error; err != nil {

		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π"})
		return
	}

	c.JSON(http.StatusOK, appointments)
}

func DeleteAppointment(c *gin.Context) {
	userID, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
		return
	}

	appointmentID := c.Param("id")

	var appointment models.Appointment
	if err := database.DB.First(&appointment, appointmentID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
		return
	}

	if appointment.UserID != userID.(uint) {
		c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏"})
		return
	}

	database.DB.Delete(&appointment)

	c.JSON(http.StatusOK, gin.H{"message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"})
}
func GetAllAppointments(c *gin.Context) {
	var apps []models.Appointment
	database.DB.
		Preload("User").
		Preload("Car").
		Preload("Service").
		Find(&apps)

	c.JSON(http.StatusOK, apps)
}
